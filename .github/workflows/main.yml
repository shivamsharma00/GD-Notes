name: Build and Release Desktop App

on:
  push:
    branches: [main]

permissions:
  contents: write

jobs:
  build:
    strategy:
      matrix:
        os: [macos-latest, windows-latest]
    runs-on: ${{ matrix.os }}

    env:
      APPLE_ID: ${{ secrets.APPLE_ID }}
      APPLE_ID_PASSWORD: ${{ secrets.APPLE_ID_PASSWORD }}
      TEAM_ID: ${{ secrets.TEAM_ID }}

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install deps
        run: npm ci

      - name: Install electron-notarize
        run: npm install --save-dev electron-notarize

      - name: Set up env vars for notarization (macOS only)
        if: runner.os == 'macOS'
        run: |
          echo "APPLE_ID=${{ secrets.APPLE_ID }}" >> $GITHUB_ENV
          echo "APPLE_ID_PASSWORD=${{ secrets.APPLE_ID_PASSWORD }}" >> $GITHUB_ENV
          echo "TEAM_ID=${{ secrets.TEAM_ID }}" >> $GITHUB_ENV
      
      - name: Build
        shell: bash
        run: |
          if [[ "$RUNNER_OS" == "Windows" ]]; then
            npm run build:win
          else
            npm run build:mac
          fi

      - name: List built files
        shell: bash
        run: ls -lh dist

      - name: Upload installer only
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.os }}-installer
          path: |
            dist/*.dmg
            dist/*.exe

  release:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./installers

      - name: Move installers to dist
        run: |
          mkdir -p dist
          find installers -type f \( -iname '*.dmg' -o -iname '*.exe' \) -exec cp {} dist/ \;

      - name: Ensure 'latest' tag exists
        run: |
          git config --global user.name "github-actions"
          git config --global user.email "github-actions@github.com"
          git fetch origin
          git tag -f latest
          git push -f origin latest

      - name: Create or update "latest" GitHub release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: latest
          name: Latest Build
          draft: false
          prerelease: false
          files: dist/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
